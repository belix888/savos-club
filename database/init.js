const sqlite3 = require('sqlite3').verbose();
const path = require('path');
const fs = require('fs');
const os = require('os');

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏ –º—ã Turso –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π SQLite
// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–º–µ–Ω –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:
// - TURSO_URL –∏–ª–∏ TURSO_DATABASE_URL (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ)
// - turso_TURSO_URL –∏–ª–∏ turso_TURSO_DATABASE_URL (—Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º turso_)
const tursoUrl = process.env.TURSO_URL || 
                 process.env.TURSO_DATABASE_URL || 
                 process.env.turso_TURSO_URL || 
                 process.env.turso_TURSO_DATABASE_URL;
const tursoToken = process.env.TURSO_AUTH_TOKEN || 
                   process.env.turso_TURSO_AUTH_TOKEN;
const isTurso = tursoUrl && tursoToken;
let db;

if (isTurso) {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º Turso (libSQL)
  const { createClient } = require('@libsql/client');
  
  const tursoClient = createClient({
    url: tursoUrl,
    authToken: tursoToken,
  });
  
  console.log('‚úÖ Using Turso database (libSQL)');
  
  // –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å sqlite3 API
  // Turso –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç rows –∫–∞–∫ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤, –Ω—É–∂–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç sqlite3
  db = {
    run: (sql, params = [], callback) => {
      const isInsert = sql.trim().toUpperCase().startsWith('INSERT');
      
      tursoClient.execute(sql, params || [])
        .then(async (result) => {
          let lastID = 0;
          let changes = result.rowsAffected || 0;
          
          // –î–ª—è INSERT –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—É—á–∞–µ–º lastID
          if (isInsert && changes > 0) {
            try {
              // –í Turso/libSQL –∏—Å–ø–æ–ª—å–∑—É–µ–º last_insert_rowid() —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ INSERT
              const idResult = await tursoClient.execute('SELECT last_insert_rowid() as id');
              if (idResult.rows && idResult.rows.length > 0 && idResult.rows[0].id) {
                lastID = Number(idResult.rows[0].id) || 0;
              }
            } catch (e) {
              // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ changes
              console.warn('‚ö†Ô∏è Could not get last_insert_rowid, trying alternative method');
              // –í –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–ª—É—á–∞—è—Ö Turso –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å lastID –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
              if (result.lastInsertRowid !== undefined) {
                lastID = Number(result.lastInsertRowid) || 0;
              }
            }
          }
          
          if (callback) {
            // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç, –ø–æ—Ö–æ–∂–∏–π –Ω–∞ sqlite3 Statement
            const ctx = {
              lastID: lastID,
              changes: changes
            };
            // –í—ã–∑—ã–≤–∞–µ–º callback —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∫–∞–∫ this
            callback.call(ctx, null);
          }
        })
        .catch((err) => {
          if (callback) {
            const ctx = {
              lastID: 0,
              changes: 0
            };
            callback.call(ctx, err);
          } else {
            console.error('‚ùå Database error:', err);
          }
        });
    },
    get: (sql, params = [], callback) => {
      tursoClient.execute(sql, params || [])
        .then((result) => {
          if (result.rows && result.rows.length > 0) {
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º row object –≤ —Ñ–æ—Ä–º–∞—Ç, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å sqlite3
            const row = result.rows[0];
            // Turso –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç—ã —Å –∫–ª—é—á–∞–º–∏ –∫–∞–∫ –∏–º–µ–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
            if (callback) callback(null, row);
          } else {
            if (callback) callback(null, undefined);
          }
        })
        .catch((err) => {
          if (callback) callback(err);
          else console.error('‚ùå Database error:', err);
        });
    },
    all: (sql, params = [], callback) => {
      tursoClient.execute(sql, params || [])
        .then((result) => {
          // Turso –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç rows –∫–∞–∫ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤
          if (callback) callback(null, result.rows || []);
        })
        .catch((err) => {
          if (callback) callback(err);
          else console.error('‚ùå Database error:', err);
        });
    },
    serialize: (callback) => {
      // –î–ª—è Turso –ø—Ä–æ—Å—Ç–æ –≤—ã–ø–æ–ª–Ω—è–µ–º callback —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
      // –¢–∞–±–ª–∏—Ü—ã —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤ async —Ñ—É–Ω–∫—Ü–∏–∏ initializeTablesTurso
      if (callback) {
        try {
          callback();
        } catch (err) {
          console.error('Error in serialize callback:', err);
        }
      }
    },
    close: (callback) => {
      // –î–ª—è Turso –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —è–≤–Ω–æ - –æ–Ω–æ —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
      // Turso –∫–ª–∏–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç HTTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ç—Ä–µ–±—É—é—Ç —è–≤–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
      // –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º callback —É—Å–ø–µ—à–Ω–æ
      if (callback) {
        try {
          callback(null);
        } catch (err) {
          console.warn('Error in close callback:', err);
        }
      }
    }
  };
  
  // –î–ª—è Turso –∏—Å–ø–æ–ª—å–∑—É–µ–º async/await –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  (async () => {
    try {
      await initializeTablesTurso(tursoClient);
      console.log('‚úÖ Turso database initialized successfully');
    } catch (error) {
      console.error('‚ùå Error initializing Turso database:', error);
    }
  })();
  
} else {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π SQLite
  function getDbPath() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –Ω–∞ Vercel –∏–ª–∏ –ø–æ–¥–æ–±–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
    if (process.env.VERCEL || process.env.NOW || process.env.LAMBDA_TASK_ROOT) {
      const tmpPath = path.join(os.tmpdir(), 'club.db');
      console.log(`üìÇ Using temporary directory for database: ${tmpPath}`);
      return tmpPath;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –≤ —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    const defaultPath = path.join(__dirname, 'club.db');
    try {
      // –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
      const testFile = path.join(__dirname, '.write-test');
      fs.writeFileSync(testFile, 'test');
      fs.unlinkSync(testFile);
      return defaultPath;
    } catch (error) {
      // –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø–∏—Å–∞—Ç—å –≤ —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º /tmp
      const tmpPath = path.join(os.tmpdir(), 'club.db');
      console.log(`‚ö†Ô∏è Cannot write to ${__dirname}, using temporary directory: ${tmpPath}`);
      console.log(`   Error: ${error.message}`);
      return tmpPath;
    }
  }
  
  const dbPath = getDbPath();
  
  // –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  db = new sqlite3.Database(dbPath, (err) => {
    if (err) {
      console.error('‚ùå Error opening database:', err);
      throw err;
    }
    console.log(`‚úÖ Database opened at: ${dbPath}`);
    
    // –í–∫–ª—é—á–∞–µ–º WAL mode
    db.run('PRAGMA journal_mode = WAL;', (err) => {
      if (err) {
        console.warn('‚ö†Ô∏è Could not enable WAL mode:', err);
      } else {
        console.log('‚úÖ WAL mode enabled');
      }
    });
    
    // –í–∫–ª—é—á–∞–µ–º foreign keys
    db.run('PRAGMA foreign_keys = ON;', (err) => {
      if (err) {
        console.warn('‚ö†Ô∏è Could not enable foreign keys:', err);
      }
    });
  });
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ SQLite
  initializeTablesSQLite();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –¥–ª—è Turso (async)
async function initializeTablesTurso(client) {
  // –í–∫–ª—é—á–∞–µ–º foreign keys (WAL mode –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è Turso)
  await client.execute('PRAGMA foreign_keys = ON;');
  
  // –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
  await client.execute(`
    CREATE TABLE IF NOT EXISTS users (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      telegram_id INTEGER UNIQUE,
      username TEXT UNIQUE,
      first_name TEXT,
      last_name TEXT,
      phone TEXT,
      profile_link TEXT,
      photo_url TEXT,
      email TEXT,
      is_resident BOOLEAN DEFAULT 0,
      is_waiter BOOLEAN DEFAULT 0,
      is_admin BOOLEAN DEFAULT 0,
      is_super_admin BOOLEAN DEFAULT 0,
      is_bartender BOOLEAN DEFAULT 0,
      chips DECIMAL(10,2) DEFAULT 0,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )
  `);
  
  await client.execute('CREATE UNIQUE INDEX IF NOT EXISTS idx_username_unique ON users(username) WHERE username IS NOT NULL');
  
  // –ú–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è users
  try {
    await client.execute('ALTER TABLE users ADD COLUMN profile_link TEXT');
  } catch (e) {}
  try {
    await client.execute('ALTER TABLE users ADD COLUMN photo_url TEXT');
  } catch (e) {}
  try {
    await client.execute('ALTER TABLE users ADD COLUMN is_bartender BOOLEAN DEFAULT 0');
  } catch (e) {}
  try {
    await client.execute('ALTER TABLE users ADD COLUMN chips DECIMAL(10,2) DEFAULT 0');
  } catch (e) {}
  
  await client.execute(`
    CREATE TABLE IF NOT EXISTS events (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      title TEXT NOT NULL,
      description TEXT,
      date DATETIME NOT NULL,
      price DECIMAL(10,2),
      image_url TEXT,
      ticket_url TEXT,
      is_active BOOLEAN DEFAULT 1,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )
  `);
  
  try {
    await client.execute('ALTER TABLE events ADD COLUMN ticket_url TEXT');
  } catch (e) {}
  
  await client.execute(`
    CREATE TABLE IF NOT EXISTS drinks (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      name TEXT NOT NULL,
      description TEXT,
      price DECIMAL(10,2) NOT NULL,
      category TEXT,
      image_url TEXT,
      is_available BOOLEAN DEFAULT 1,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )
  `);
  
  await client.execute(`
    CREATE TABLE IF NOT EXISTS orders (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      user_id INTEGER NOT NULL,
      waiter_id INTEGER,
      status TEXT DEFAULT 'new',
      total_amount DECIMAL(10,2) NOT NULL,
      confirmation_code TEXT,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      FOREIGN KEY (user_id) REFERENCES users (id),
      FOREIGN KEY (waiter_id) REFERENCES users (id)
    )
  `);
  
  await client.execute(`
    CREATE TABLE IF NOT EXISTS order_items (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      order_id INTEGER NOT NULL,
      drink_id INTEGER NOT NULL,
      quantity INTEGER NOT NULL,
      price DECIMAL(10,2) NOT NULL,
      FOREIGN KEY (order_id) REFERENCES orders (id),
      FOREIGN KEY (drink_id) REFERENCES drinks (id)
    )
  `);
  
  await client.execute(`
    CREATE TABLE IF NOT EXISTS contests (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      title TEXT NOT NULL,
      description TEXT,
      start_date DATETIME NOT NULL,
      end_date DATETIME NOT NULL,
      prize TEXT,
      image_url TEXT,
      link TEXT,
      is_active BOOLEAN DEFAULT 1,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )
  `);
  
  await client.execute(`
    CREATE TABLE IF NOT EXISTS contest_participants (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      contest_id INTEGER NOT NULL,
      user_id INTEGER NOT NULL,
      submission TEXT,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      FOREIGN KEY (contest_id) REFERENCES contests (id),
      FOREIGN KEY (user_id) REFERENCES users (id)
    )
  `);
  
  await client.execute(`
    CREATE TABLE IF NOT EXISTS event_bookings (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      event_id INTEGER NOT NULL,
      user_id INTEGER NOT NULL,
      guests INTEGER NOT NULL DEFAULT 1,
      status TEXT DEFAULT 'confirmed',
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      FOREIGN KEY (event_id) REFERENCES events (id),
      FOREIGN KEY (user_id) REFERENCES users (id)
    )
  `);
  
  await client.execute(`
    CREATE TABLE IF NOT EXISTS waiter_shifts (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      waiter_id INTEGER NOT NULL,
      status TEXT DEFAULT 'working',
      start_time DATETIME DEFAULT CURRENT_TIMESTAMP,
      end_time DATETIME,
      FOREIGN KEY (waiter_id) REFERENCES users (id)
    )
  `);
  
  await client.execute(`
    CREATE TABLE IF NOT EXISTS settings (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      key TEXT UNIQUE NOT NULL,
      value TEXT,
      description TEXT,
      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )
  `);
  
  await client.execute(`
    CREATE TABLE IF NOT EXISTS chips_logs (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      user_id INTEGER NOT NULL,
      bartender_id INTEGER NOT NULL,
      amount DECIMAL(10,2) NOT NULL,
      reason TEXT,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      FOREIGN KEY (user_id) REFERENCES users (id),
      FOREIGN KEY (bartender_id) REFERENCES users (id)
    )
  `);
  
  await client.execute(`
    CREATE TABLE IF NOT EXISTS order_logs (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      order_id INTEGER NOT NULL,
      user_id INTEGER NOT NULL,
      total_amount DECIMAL(10,2) NOT NULL,
      items_count INTEGER NOT NULL,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      FOREIGN KEY (order_id) REFERENCES orders (id),
      FOREIGN KEY (user_id) REFERENCES users (id)
    )
  `);
  
  await client.execute(`
    CREATE TABLE IF NOT EXISTS waiter_actions_logs (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      waiter_id INTEGER NOT NULL,
      action_type TEXT NOT NULL,
      order_id INTEGER,
      description TEXT,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      FOREIGN KEY (waiter_id) REFERENCES users (id),
      FOREIGN KEY (order_id) REFERENCES orders (id)
    )
  `);
  
  await client.execute(`
    CREATE TABLE IF NOT EXISTS role_change_logs (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      user_id INTEGER NOT NULL,
      admin_id INTEGER NOT NULL,
      old_role TEXT,
      new_role TEXT,
      description TEXT,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      FOREIGN KEY (user_id) REFERENCES users (id),
      FOREIGN KEY (admin_id) REFERENCES users (id)
    )
  `);
  
  // –í—Å—Ç–∞–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  try {
    await client.execute(`
      INSERT OR IGNORE INTO settings (key, value, description) VALUES 
      ('club_name', 'SavosBot Club', '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª—É–±–∞'),
      ('welcome_message', '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SavosBot Club!', '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
    `);
  } catch (e) {}
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ SQLite (callback-based)
function initializeTablesSQLite() {
  db.serialize(() => {
    // –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    db.run(`
      CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        telegram_id INTEGER UNIQUE,
        username TEXT UNIQUE,
        first_name TEXT,
        last_name TEXT,
        phone TEXT,
        profile_link TEXT,
        photo_url TEXT,
        email TEXT,
        is_resident BOOLEAN DEFAULT 0,
        is_waiter BOOLEAN DEFAULT 0,
        is_admin BOOLEAN DEFAULT 0,
        is_super_admin BOOLEAN DEFAULT 0,
        is_bartender BOOLEAN DEFAULT 0,
        chips DECIMAL(10,2) DEFAULT 0,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
      )
    `);
    
    db.run('CREATE UNIQUE INDEX IF NOT EXISTS idx_username_unique ON users(username) WHERE username IS NOT NULL', (err) => {
      if (err && !String(err.message).includes('duplicate') && !String(err.message).includes('already exists')) {
        console.warn('Migration: username unique index warning:', err.message);
      }
    });

    db.run('ALTER TABLE users ADD COLUMN profile_link TEXT', (err) => {
      if (err && !String(err.message).includes('duplicate column name')) {
        console.warn('Migration: profile_link add column warning:', err.message);
      }
    });
    db.run('ALTER TABLE users ADD COLUMN photo_url TEXT', (err) => {
      if (err && !String(err.message).includes('duplicate column name')) {
        console.warn('Migration: photo_url add column warning:', err.message);
      }
    });
    
    db.run('ALTER TABLE users ADD COLUMN is_bartender BOOLEAN DEFAULT 0', (err) => {
      if (err && !String(err.message).includes('duplicate column name')) {
        console.warn('Migration: is_bartender add column warning:', err.message);
      }
    });
    db.run('ALTER TABLE users ADD COLUMN chips DECIMAL(10,2) DEFAULT 0', (err) => {
      if (err && !String(err.message).includes('duplicate column name')) {
        console.warn('Migration: chips add column warning:', err.message);
      }
    });

    // –¢–∞–±–ª–∏—Ü–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π (–∞—Ñ–∏—à–∞)
    db.run(`
      CREATE TABLE IF NOT EXISTS events (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        title TEXT NOT NULL,
        description TEXT,
        date DATETIME NOT NULL,
        price DECIMAL(10,2),
        image_url TEXT,
        ticket_url TEXT,
        is_active BOOLEAN DEFAULT 1,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
      )
    `);

    db.run('ALTER TABLE events ADD COLUMN ticket_url TEXT', (err) => {
      if (err && !String(err.message).includes('duplicate column name')) {
        console.warn('Migration: ticket_url add column warning:', err.message);
      }
    });

    // –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–ø–∏—Ç–∫–æ–≤ (–±–∞—Ä)
    db.run(`
      CREATE TABLE IF NOT EXISTS drinks (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        description TEXT,
        price DECIMAL(10,2) NOT NULL,
        category TEXT,
        image_url TEXT,
        is_available BOOLEAN DEFAULT 1,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
      )
    `);

    // –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤
    db.run(`
      CREATE TABLE IF NOT EXISTS orders (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        waiter_id INTEGER,
        status TEXT DEFAULT 'new',
        total_amount DECIMAL(10,2) NOT NULL,
        confirmation_code TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (user_id) REFERENCES users (id),
        FOREIGN KEY (waiter_id) REFERENCES users (id)
      )
    `);

    // –¢–∞–±–ª–∏—Ü–∞ –ø–æ–∑–∏—Ü–∏–π –∑–∞–∫–∞–∑–∞
    db.run(`
      CREATE TABLE IF NOT EXISTS order_items (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        order_id INTEGER NOT NULL,
        drink_id INTEGER NOT NULL,
        quantity INTEGER NOT NULL,
        price DECIMAL(10,2) NOT NULL,
        FOREIGN KEY (order_id) REFERENCES orders (id),
        FOREIGN KEY (drink_id) REFERENCES drinks (id)
      )
    `);

    // –¢–∞–±–ª–∏—Ü–∞ –∫–æ–Ω–∫—É—Ä—Å–æ–≤
    db.run(`
      CREATE TABLE IF NOT EXISTS contests (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        title TEXT NOT NULL,
        description TEXT,
        start_date DATETIME NOT NULL,
        end_date DATETIME NOT NULL,
        prize TEXT,
        image_url TEXT,
        link TEXT,
        is_active BOOLEAN DEFAULT 1,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
      )
    `);

    // –¢–∞–±–ª–∏—Ü–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–Ω–∫—É—Ä—Å–æ–≤
    db.run(`
      CREATE TABLE IF NOT EXISTS contest_participants (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        contest_id INTEGER NOT NULL,
        user_id INTEGER NOT NULL,
        submission TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (contest_id) REFERENCES contests (id),
        FOREIGN KEY (user_id) REFERENCES users (id)
      )
    `);

    // –¢–∞–±–ª–∏—Ü–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    db.run(`
      CREATE TABLE IF NOT EXISTS event_bookings (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        event_id INTEGER NOT NULL,
        user_id INTEGER NOT NULL,
        guests INTEGER NOT NULL DEFAULT 1,
        status TEXT DEFAULT 'confirmed',
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (event_id) REFERENCES events (id),
        FOREIGN KEY (user_id) REFERENCES users (id)
      )
    `);

    // –¢–∞–±–ª–∏—Ü–∞ —Å–º–µ–Ω –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤
    db.run(`
      CREATE TABLE IF NOT EXISTS waiter_shifts (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        waiter_id INTEGER NOT NULL,
        status TEXT DEFAULT 'working',
        start_time DATETIME DEFAULT CURRENT_TIMESTAMP,
        end_time DATETIME,
        FOREIGN KEY (waiter_id) REFERENCES users (id)
      )
    `);

    // –¢–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏—Å—Ç–µ–º—ã
    db.run(`
      CREATE TABLE IF NOT EXISTS settings (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        key TEXT UNIQUE NOT NULL,
        value TEXT,
        description TEXT,
        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
      )
    `);

    // –¢–∞–±–ª–∏—Ü–∞ –ª–æ–≥–æ–≤ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π —Ñ–∏—à–µ–∫
    db.run(`
      CREATE TABLE IF NOT EXISTS chips_logs (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        bartender_id INTEGER NOT NULL,
        amount DECIMAL(10,2) NOT NULL,
        reason TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (user_id) REFERENCES users (id),
        FOREIGN KEY (bartender_id) REFERENCES users (id)
      )
    `);

    // –¢–∞–±–ª–∏—Ü–∞ –ª–æ–≥–æ–≤ –∑–∞–∫–∞–∑–æ–≤ (—Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ –∏ –ø–æ–∫—É–ø–∫–µ)
    db.run(`
      CREATE TABLE IF NOT EXISTS order_logs (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        order_id INTEGER NOT NULL,
        user_id INTEGER NOT NULL,
        total_amount DECIMAL(10,2) NOT NULL,
        items_count INTEGER NOT NULL,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (order_id) REFERENCES orders (id),
        FOREIGN KEY (user_id) REFERENCES users (id)
      )
    `);

    // –¢–∞–±–ª–∏—Ü–∞ –ª–æ–≥–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤
    db.run(`
      CREATE TABLE IF NOT EXISTS waiter_actions_logs (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        waiter_id INTEGER NOT NULL,
        action_type TEXT NOT NULL,
        order_id INTEGER,
        description TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (waiter_id) REFERENCES users (id),
        FOREIGN KEY (order_id) REFERENCES orders (id)
      )
    `);

    // –¢–∞–±–ª–∏—Ü–∞ –ª–æ–≥–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    db.run(`
      CREATE TABLE IF NOT EXISTS role_change_logs (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        admin_id INTEGER NOT NULL,
        old_role TEXT,
        new_role TEXT,
        description TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (user_id) REFERENCES users (id),
        FOREIGN KEY (admin_id) REFERENCES users (id)
      )
    `);

    // –í—Å—Ç–∞–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    db.run(`
      INSERT OR IGNORE INTO settings (key, value, description) VALUES 
      ('club_name', 'SavosBot Club', '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª—É–±–∞'),
      ('welcome_message', '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SavosBot Club!', '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
    `);

    // –í—Å—Ç–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ, –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
    // db.run(`
    //   INSERT OR IGNORE INTO drinks (name, description, price, category) VALUES 
    //   ('–ú–æ—Ö–∏—Ç–æ', '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–æ—Ö–∏—Ç–æ —Å –º—è—Ç–æ–π –∏ –ª–∞–π–º–æ–º', 250.00, '–ö–æ–∫—Ç–µ–π–ª–∏'),
    //   ('–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞', '–¢–µ–∫–∏–ª–∞, —Ç—Ä–∏–ø–ª —Å–µ–∫ –∏ –ª–∞–π–º', 300.00, '–ö–æ–∫—Ç–µ–π–ª–∏'),
    //   ('–ö–æ—Å–º–æ–ø–æ–ª–∏—Ç–µ–Ω', '–í–æ–¥–∫–∞, –∫–ª—é–∫–≤–µ–Ω–Ω—ã–π —Å–æ–∫, –ª–∞–π–º', 280.00, '–ö–æ–∫—Ç–µ–π–ª–∏'),
    //   ('–ü–∏–≤–æ —Ä–∞–∑–ª–∏–≤–Ω–æ–µ', '–°–≤–µ–∂–µ–µ –ø–∏–≤–æ –∏–∑ –∫–µ–≥', 150.00, '–ü–∏–≤–æ'),
    //   ('–í–∏–Ω–æ –∫—Ä–∞—Å–Ω–æ–µ', '–î–æ–º–∞—à–Ω–µ–µ –≤–∏–Ω–æ', 350.00, '–í–∏–Ω–æ'),
    //   ('–í–æ–¥–∫–∞ –ø—Ä–µ–º–∏—É–º', '–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –≤–æ–¥–∫–∞', 500.00, '–ö—Ä–µ–ø–∫–∏–µ –Ω–∞–ø–∏—Ç–∫–∏'),
    //   ('–ö–æ—Ñ–µ', '–°–≤–µ–∂–µ—Å–≤–∞—Ä–µ–Ω–Ω—ã–π –∫–æ—Ñ–µ', 150.00, '–ì–æ—Ä—è—á–∏–µ –Ω–∞–ø–∏—Ç–∫–∏')
    // `);

    console.log('‚úÖ Database initialized successfully!');
  });
}

module.exports = db;
