const sqlite3 = require('sqlite3').verbose();
const path = require('path');
const fs = require('fs');
const os = require('os');

// –î–ª—è Vercel –∏ –¥—Ä—É–≥–∏—Ö serverless –æ–∫—Ä—É–∂–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º /tmp
// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –∑–∞–ø–∏—Å—å –≤ —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
function getDbPath() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –Ω–∞ Vercel –∏–ª–∏ –ø–æ–¥–æ–±–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
  if (process.env.VERCEL || process.env.NOW || process.env.LAMBDA_TASK_ROOT) {
    const tmpPath = path.join(os.tmpdir(), 'club.db');
    console.log(`üìÇ Using temporary directory for database: ${tmpPath}`);
    return tmpPath;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –≤ —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
  const defaultPath = path.join(__dirname, 'club.db');
  try {
    // –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    const testFile = path.join(__dirname, '.write-test');
    fs.writeFileSync(testFile, 'test');
    fs.unlinkSync(testFile);
    return defaultPath;
  } catch (error) {
    // –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø–∏—Å–∞—Ç—å –≤ —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º /tmp
    const tmpPath = path.join(os.tmpdir(), 'club.db');
    console.log(`‚ö†Ô∏è Cannot write to ${__dirname}, using temporary directory: ${tmpPath}`);
    console.log(`   Error: ${error.message}`);
    return tmpPath;
  }
}

const dbPath = getDbPath();

// –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å —Ä–µ–∂–∏–º–æ–º –æ—Ç–∫—Ä—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç WAL mode –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
const db = new sqlite3.Database(dbPath, (err) => {
  if (err) {
    console.error('‚ùå Error opening database:', err);
    throw err;
  }
  console.log(`‚úÖ Database opened at: ${dbPath}`);
  
  // –í–∫–ª—é—á–∞–µ–º WAL mode –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
  db.run('PRAGMA journal_mode = WAL;', (err) => {
    if (err) {
      console.warn('‚ö†Ô∏è Could not enable WAL mode:', err);
    } else {
      console.log('‚úÖ WAL mode enabled');
    }
  });
  
  // –í–∫–ª—é—á–∞–µ–º foreign keys
  db.run('PRAGMA foreign_keys = ON;', (err) => {
    if (err) {
      console.warn('‚ö†Ô∏è Could not enable foreign keys:', err);
    }
  });
});

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
db.serialize(() => {
  // –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  db.run(`
    CREATE TABLE IF NOT EXISTS users (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      telegram_id INTEGER UNIQUE,
      username TEXT UNIQUE,
      first_name TEXT,
      last_name TEXT,
      phone TEXT,
      profile_link TEXT,
      photo_url TEXT,
      email TEXT,
      is_resident BOOLEAN DEFAULT 0,
      is_waiter BOOLEAN DEFAULT 0,
      is_admin BOOLEAN DEFAULT 0,
      is_super_admin BOOLEAN DEFAULT 0,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )
  `);
  
  // –ú–∏–≥—Ä–∞—Ü–∏—è: —Å–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è username
  // SQLite –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ UNIQUE –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü,
  // –ø–æ—ç—Ç–æ–º—É —Å–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å
  db.run('CREATE UNIQUE INDEX IF NOT EXISTS idx_username_unique ON users(username) WHERE username IS NOT NULL', (err) => {
    if (err && !String(err.message).includes('duplicate') && !String(err.message).includes('already exists')) {
      console.warn('Migration: username unique index warning:', err.message);
    }
  });

  // –ú–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü—ã users: –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã
  // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: SQLite –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç IF NOT EXISTS –¥–ª—è —Å—Ç–æ–ª–±—Ü–æ–≤, –ø–æ—ç—Ç–æ–º—É –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å—Ç–æ–ª–±–µ—Ü —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  db.run('ALTER TABLE users ADD COLUMN profile_link TEXT', (err) => {
    if (err && !String(err.message).includes('duplicate column name')) {
      console.warn('Migration: profile_link add column warning:', err.message);
    }
  });
  db.run('ALTER TABLE users ADD COLUMN photo_url TEXT', (err) => {
    if (err && !String(err.message).includes('duplicate column name')) {
      console.warn('Migration: photo_url add column warning:', err.message);
    }
  });
  

  // –¢–∞–±–ª–∏—Ü–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π (–∞—Ñ–∏—à–∞)
  db.run(`
    CREATE TABLE IF NOT EXISTS events (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      title TEXT NOT NULL,
      description TEXT,
      date DATETIME NOT NULL,
      price DECIMAL(10,2),
      image_url TEXT,
      ticket_url TEXT,
      is_active BOOLEAN DEFAULT 1,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )
  `);

  // –ú–∏–≥—Ä–∞—Ü–∏—è: –¥–æ–±–∞–≤–ª—è–µ–º ticket_url –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
  db.run('ALTER TABLE events ADD COLUMN ticket_url TEXT', (err) => {
    if (err && !String(err.message).includes('duplicate column name')) {
      console.warn('Migration: ticket_url add column warning:', err.message);
    }
  });

  // –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–ø–∏—Ç–∫–æ–≤ (–±–∞—Ä)
  db.run(`
    CREATE TABLE IF NOT EXISTS drinks (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      name TEXT NOT NULL,
      description TEXT,
      price DECIMAL(10,2) NOT NULL,
      category TEXT,
      image_url TEXT,
      is_available BOOLEAN DEFAULT 1,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )
  `);

  // –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤
  db.run(`
    CREATE TABLE IF NOT EXISTS orders (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      user_id INTEGER NOT NULL,
      waiter_id INTEGER,
      status TEXT DEFAULT 'new',
      total_amount DECIMAL(10,2) NOT NULL,
      confirmation_code TEXT,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      FOREIGN KEY (user_id) REFERENCES users (id),
      FOREIGN KEY (waiter_id) REFERENCES users (id)
    )
  `);

  // –¢–∞–±–ª–∏—Ü–∞ –ø–æ–∑–∏—Ü–∏–π –∑–∞–∫–∞–∑–∞
  db.run(`
    CREATE TABLE IF NOT EXISTS order_items (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      order_id INTEGER NOT NULL,
      drink_id INTEGER NOT NULL,
      quantity INTEGER NOT NULL,
      price DECIMAL(10,2) NOT NULL,
      FOREIGN KEY (order_id) REFERENCES orders (id),
      FOREIGN KEY (drink_id) REFERENCES drinks (id)
    )
  `);

  // –¢–∞–±–ª–∏—Ü–∞ –∫–æ–Ω–∫—É—Ä—Å–æ–≤
  db.run(`
    CREATE TABLE IF NOT EXISTS contests (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      title TEXT NOT NULL,
      description TEXT,
      start_date DATETIME NOT NULL,
      end_date DATETIME NOT NULL,
      prize TEXT,
      image_url TEXT,
      is_active BOOLEAN DEFAULT 1,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )
  `);

  // –¢–∞–±–ª–∏—Ü–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–Ω–∫—É—Ä—Å–æ–≤
  db.run(`
    CREATE TABLE IF NOT EXISTS contest_participants (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      contest_id INTEGER NOT NULL,
      user_id INTEGER NOT NULL,
      submission TEXT,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      FOREIGN KEY (contest_id) REFERENCES contests (id),
      FOREIGN KEY (user_id) REFERENCES users (id)
    )
  `);

  // –¢–∞–±–ª–∏—Ü–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
  db.run(`
    CREATE TABLE IF NOT EXISTS event_bookings (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      event_id INTEGER NOT NULL,
      user_id INTEGER NOT NULL,
      guests INTEGER NOT NULL DEFAULT 1,
      status TEXT DEFAULT 'confirmed',
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      FOREIGN KEY (event_id) REFERENCES events (id),
      FOREIGN KEY (user_id) REFERENCES users (id)
    )
  `);

  // –¢–∞–±–ª–∏—Ü–∞ —Å–º–µ–Ω –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤
  db.run(`
    CREATE TABLE IF NOT EXISTS waiter_shifts (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      waiter_id INTEGER NOT NULL,
      status TEXT DEFAULT 'working',
      start_time DATETIME DEFAULT CURRENT_TIMESTAMP,
      end_time DATETIME,
      FOREIGN KEY (waiter_id) REFERENCES users (id)
    )
  `);

  // –¢–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏—Å—Ç–µ–º—ã
  db.run(`
    CREATE TABLE IF NOT EXISTS settings (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      key TEXT UNIQUE NOT NULL,
      value TEXT,
      description TEXT,
      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )
  `);

  // –í—Å—Ç–∞–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  db.run(`
    INSERT OR IGNORE INTO settings (key, value, description) VALUES 
    ('club_name', 'SavosBot Club', '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª—É–±–∞'),
    ('welcome_message', '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SavosBot Club!', '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'),
    ('resident_benefits', '–°–∫–∏–¥–∫–∏ –Ω–∞ –Ω–∞–ø–∏—Ç–∫–∏, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º', '–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤'),
    ('blocked_message', '–°–∫–æ—Ä–æ –≤—ã —É–∑–Ω–∞–µ—Ç–µ, —á—Ç–æ –±—É–¥–µ—Ç', '–°–æ–æ–±—â–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ —Ä–∞–∑–¥–µ–ª–æ–≤'),
    ('bar_enabled', '1', '–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä–∞–∑–¥–µ–ª–∞ –ë–∞—Ä'),
    ('events_enabled', '1', '–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä–∞–∑–¥–µ–ª–∞ –ê—Ñ–∏—à–∞'),
    ('contests_enabled', '1', '–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä–∞–∑–¥–µ–ª–∞ –ö–æ–Ω–∫—É—Ä—Å—ã'),
    ('maintenance_mode', '0', '–†–µ–∂–∏–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è'),
    ('max_order_amount', '10000', '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞'),
    ('waiter_notification_enabled', '1', '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤')
  `);

  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–∞–ø–∏—Ç–∫–∏
  db.run(`
    INSERT OR IGNORE INTO drinks (name, description, price, category) VALUES 
    ('–ö–æ–∫—Ç–µ–π–ª—å "–°–∞–≤–æ—Å"', '–§–∏—Ä–º–µ–Ω–Ω—ã–π –∫–æ–∫—Ç–µ–π–ª—å –∫–ª—É–±–∞', 450.00, '–ö–æ–∫—Ç–µ–π–ª–∏'),
    ('–ü–∏–≤–æ "–ö–ª—É–±–Ω–æ–µ"', '–†–∞–∑–ª–∏–≤–Ω–æ–µ –ø–∏–≤–æ', 200.00, '–ü–∏–≤–æ'),
    ('–í–∏–Ω–æ –∫—Ä–∞—Å–Ω–æ–µ', '–î–æ–º–∞—à–Ω–µ–µ –≤–∏–Ω–æ', 350.00, '–í–∏–Ω–æ'),
    ('–í–æ–¥–∫–∞ –ø—Ä–µ–º–∏—É–º', '–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –≤–æ–¥–∫–∞', 500.00, '–ö—Ä–µ–ø–∫–∏–µ –Ω–∞–ø–∏—Ç–∫–∏'),
    ('–ö–æ—Ñ–µ', '–°–≤–µ–∂–µ—Å–≤–∞—Ä–µ–Ω–Ω—ã–π –∫–æ—Ñ–µ', 150.00, '–ì–æ—Ä—è—á–∏–µ –Ω–∞–ø–∏—Ç–∫–∏')
  `);

  console.log('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
});

module.exports = db;
