// Load environment variables
if (process.env.NODE_ENV === 'production') {
  require('dotenv').config({ path: '.env.production' });
} else {
  require('dotenv').config();
}
const { Telegraf } = require('telegraf');
const express = require('express');
const cors = require('cors');
const path = require('path');
const db = require('../database/init');

const app = express();
const bot = new Telegraf(process.env.BOT_TOKEN);

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));

// –ò–º–ø–æ—Ä—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤
const { router: authRoutes } = require('./routes/auth');
const userRoutes = require('./routes/users');
const eventRoutes = require('./routes/events');
const drinkRoutes = require('./routes/drinks');
const orderRoutes = require('./routes/orders');
const contestRoutes = require('./routes/contests');
const adminRoutes = require('./routes/admin');

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤
app.use('/api/auth', authRoutes);
app.use('/api/users', userRoutes);
app.use('/api/events', eventRoutes);
app.use('/api/drinks', drinkRoutes);
app.use('/api/orders', orderRoutes);
app.use('/api/contests', contestRoutes);
app.use('/api/admin', adminRoutes);

// Endpoints –¥–ª—è –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤ (waiters)
// ==========================================
// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞ –∏ —Å–º–µ–Ω—ã
app.get('/api/waiters', async (req, res) => {
  try {
    const auth = req.headers.authorization || '';
    if (!auth.startsWith('Bearer ')) {
      return res.status(401).json({ error: 'Unauthorized' });
    }
    const token = auth.substring(7);
    const jwt = require('jsonwebtoken');
    let payload;
    try {
      payload = jwt.verify(token, process.env.JWT_SECRET || 'savosbot_club_super_secret_jwt_key_2024');
    } catch (e) {
      return res.status(401).json({ error: 'Invalid token' });
    }
    const waiter = await new Promise((resolve, reject) => {
      db.get('SELECT * FROM users WHERE id = ? AND is_waiter = 1', [payload.id], (err, row) => {
        if (err) reject(err);
        else resolve(row);
      });
    });
    if (!waiter) {
      return res.status(403).json({ error: 'Not a waiter' });
    }
    const shift = await new Promise((resolve, reject) => {
      db.get('SELECT * FROM waiter_shifts WHERE waiter_id = ? AND (end_time IS NULL OR status = "working") ORDER BY start_time DESC LIMIT 1', [payload.id], (err, row) => {
        if (err) reject(err);
        else resolve(row);
      });
    });
    res.json({
      waiter: {
        id: waiter.id,
        first_name: waiter.first_name,
        last_name: waiter.last_name,
        username: waiter.username
      },
      shift: shift || null,
      is_on_shift: !!shift && !shift.end_time && shift.status === 'working'
    });
  } catch (error) {
    console.error('Error fetching waiter info:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞
app.get('/api/waiters/orders', async (req, res) => {
  try {
    const auth = req.headers.authorization || '';
    if (!auth.startsWith('Bearer ')) {
      return res.status(401).json({ error: 'Unauthorized' });
    }
    const token = auth.substring(7);
    const jwt = require('jsonwebtoken');
    let userId;
    try {
      const payload = jwt.verify(token, process.env.JWT_SECRET || 'savosbot_club_super_secret_jwt_key_2024');
      userId = payload.id;
    } catch (e) {
      return res.status(401).json({ error: 'Invalid token' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–º –∏ –Ω–∞ —Å–º–µ–Ω–µ
    const user = await new Promise((resolve, reject) => {
      db.get('SELECT * FROM users WHERE id = ? AND is_waiter = 1', [userId], (err, row) => {
        if (err) reject(err);
        else resolve(row);
      });
    });
    if (!user) return res.status(403).json({ error: '–¢–æ–ª—å–∫–æ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç—ã –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã' });
    
    const shift = await new Promise((resolve, reject) => {
      db.get('SELECT * FROM waiter_shifts WHERE waiter_id = ? AND (end_time IS NULL OR status = "working") ORDER BY start_time DESC LIMIT 1', [userId], (err, row) => {
        if (err) reject(err);
        else resolve(row);
      });
    });
    if (!shift) {
      return res.status(400).json({ error: '–í—ã –Ω–µ –Ω–∞ —Å–º–µ–Ω–µ. –ù–∞—á–Ω–∏—Ç–µ —Å–º–µ–Ω—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –∑–∞–∫–∞–∑—ã.' });
    }
    if (shift.end_time || shift.status !== 'working') {
      return res.status(400).json({ error: '–í–∞—à–∞ —Å–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é —Å–º–µ–Ω—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –∑–∞–∫–∞–∑—ã.' });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'new', –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –≤–∑—è—Ç—ã
    const orders = await new Promise((resolve, reject) => {
      db.all(`
        SELECT 
          o.id, o.user_id, o.waiter_id, o.status, o.total_amount, o.created_at, o.updated_at,
          u.first_name as user_first_name, u.last_name as user_last_name,
          u.username as user_username, u.phone as user_phone
        FROM orders o
        LEFT JOIN users u ON o.user_id = u.id
        WHERE o.status = ? AND (o.waiter_id IS NULL OR o.waiter_id = 0)
        ORDER BY o.created_at ASC
      `, ['new'], (err, rows) => {
        if (err) reject(err);
        else resolve(rows);
      });
    });
    
    if (!orders || orders.length === 0) {
      return res.json([]);
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
    const orderIds = orders.map(o => o.id);
    const placeholders = orderIds.map(() => '?').join(',');
    const items = await new Promise((resolve, reject) => {
      db.all(`
        SELECT oi.order_id, oi.drink_id, oi.quantity, oi.price, d.name as drink_name
        FROM order_items oi
        LEFT JOIN drinks d ON oi.drink_id = d.id
        WHERE oi.order_id IN (${placeholders})
      `, orderIds, (err, rows) => {
        if (err) reject(err);
        else resolve(rows || []);
      });
    });
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –∑–∞–∫–∞–∑–∞–º
    const itemsByOrder = {};
    (items || []).forEach(item => {
      if (!itemsByOrder[item.order_id]) itemsByOrder[item.order_id] = [];
      itemsByOrder[item.order_id].push(item);
    });
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    const ordersWithItems = orders.map(order => {
      const orderItems = itemsByOrder[order.id] || [];
      const itemsText = orderItems
        .map(item => `${item.drink_name || '–ù–∞–ø–∏—Ç–æ–∫ #' + item.drink_id} (x${item.quantity} - ${(item.price * item.quantity).toFixed(2)} —Ñ–∏—à.)`)
        .join(', ');
      return {
        ...order,
        items_text: itemsText,
        items_count: orderItems.length
      };
    });
    
    res.json(ordersWithItems);
  } catch (error) {
    console.error('Error fetching waiter orders:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞
app.get('/api/waiters/orders/active', async (req, res) => {
  try {
    const auth = req.headers.authorization || '';
    if (!auth.startsWith('Bearer ')) {
      return res.status(401).json({ error: 'Unauthorized' });
    }
    const token = auth.substring(7);
    const jwt = require('jsonwebtoken');
    let userId;
    try {
      const payload = jwt.verify(token, process.env.JWT_SECRET || 'savosbot_club_super_secret_jwt_key_2024');
      userId = payload.id;
    } catch (e) {
      return res.status(401).json({ error: 'Invalid token' });
    }
    
    const user = await new Promise((resolve, reject) => {
      db.get('SELECT * FROM users WHERE id = ? AND is_waiter = 1', [userId], (err, row) => {
        if (err) reject(err);
        else resolve(row);
      });
    });
    if (!user) return res.status(403).json({ error: '–¢–æ–ª—å–∫–æ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç—ã –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã' });
    
    const orders = await new Promise((resolve, reject) => {
      db.all(`
        SELECT o.*, u.first_name, u.last_name, u.username
        FROM orders o
        LEFT JOIN users u ON o.user_id = u.id
        WHERE o.waiter_id = ? AND o.status IN ('taken', 'new')
        ORDER BY o.created_at ASC
      `, [userId], (err, rows) => {
        if (err) reject(err);
        else resolve(rows);
      });
    });
    
    res.json(orders || []);
  } catch (error) {
    console.error('Error fetching active orders:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
bot.start(async (ctx) => {
  const userId = ctx.from.id;
  const username = ctx.from.username || ctx.from.first_name;
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    const user = await new Promise((resolve, reject) => {
      db.get('SELECT * FROM users WHERE telegram_id = ?', [userId], (err, row) => {
        if (err) reject(err);
        else resolve(row);
      });
    });

    if (!user) {
      // –®–∞–≥ 1: –∑–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏ (–µ—Å–ª–∏ first_name –ø—É—Å—Ç)
      if (!ctx.from.first_name) {
        await ctx.reply('üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–µ –∏–º—è.');
        return;
      }

      // –®–∞–≥ 2: –∑–∞–ø—Ä–æ—Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
      await ctx.reply('üìû –û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', {
        reply_markup: {
          keyboard: [
            [{ text: 'üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', request_contact: true }]
          ],
          resize_keyboard: true,
          one_time_keyboard: true
        }
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–∞–∑–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏; –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ —Ñ–æ—Ç–æ –¥–æ–±–∞–≤–∏–º –ø–æ—Å–ª–µ
      const internalId = await new Promise((resolve, reject) => {
        db.run(
          'INSERT INTO users (telegram_id, username, first_name, last_name) VALUES (?, ?, ?, ?)',
          [userId, ctx.from.username, ctx.from.first_name, ctx.from.last_name],
          function(err) {
            if (err) reject(err);
            else resolve(this.lastID);
          }
        );
      });

      // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –∏ —Ñ–æ—Ç–æ
      const profile_link = ctx.from.username ? `https://t.me/${ctx.from.username}` : undefined;
      let photo_url = null;
      try {
        const photos = await ctx.telegram.getUserProfilePhotos(userId, 0, 1);
        if (photos.total_count > 0) {
          const fileId = photos.photos[0][0].file_id;
          const file = await ctx.telegram.getFile(fileId);
          photo_url = `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${file.file_path}`;
        }
      } catch (e) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è:', e.message);
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –∏ —Ñ–æ—Ç–æ (—Ç–µ–ª–µ—Ñ–æ–Ω –¥–æ–±–∞–≤–∏–º –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞)
      await new Promise((resolve, reject) => {
        db.run(
          'UPDATE users SET profile_link = COALESCE(?, profile_link), photo_url = COALESCE(?, photo_url) WHERE id = ?',
          [profile_link || null, photo_url || null, internalId],
          function(err) { if (err) reject(err); else resolve(); }
        );
      });

      await ctx.reply('–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.');
    } else {
      await ctx.reply(
        `üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${username}!\n\n` +
        `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –≤ SavosBot Club. ` +
        `–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å?`,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: `${process.env.WEBHOOK_URL}/mini-app` } }],
              [{ text: 'üìã –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' }],
              [{ text: 'üìÖ –ê—Ñ–∏—à–∞', callback_data: 'events' }],
              [{ text: 'üç∏ –ë–∞—Ä', callback_data: 'bar' }]
            ]
          }
        }
      );
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
bot.on('contact', async (ctx) => {
  try {
    const tgId = ctx.from.id;
    const phone = ctx.message.contact.phone_number;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∏ updated_at
    await new Promise((resolve, reject) => {
      db.run(
        'UPDATE users SET phone = ?, updated_at = CURRENT_TIMESTAMP WHERE telegram_id = ?',
        [phone, tgId],
        function(err) { if (err) reject(err); else resolve(); }
      );
    });

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –µ–≥–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID
    const user = await new Promise((resolve, reject) => {
      db.get('SELECT * FROM users WHERE telegram_id = ?', [tgId], (err, row) => {
        if (err) reject(err); else resolve(row);
      });
    });

    await ctx.reply(
      `‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n` +
      `–í–∞—à–µ –∏–º—è: ${ctx.from.first_name} ${ctx.from.last_name || ''}\n` +
      `–ù–æ–º–µ—Ä: +${phone.replace(/[^\d]/g, '')}\n` +
      `ID –≤ —Å–∏—Å—Ç–µ–º–µ: ${user.id}\n` +
      `${ctx.from.username ? `–ü—Ä–æ—Ñ–∏–ª—å: https://t.me/${ctx.from.username}` : ''}`,
      {
        reply_markup: {
          remove_keyboard: true,
          inline_keyboard: [
            [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: `${process.env.WEBHOOK_URL}/mini-app` } }],
            [{ text: 'üìã –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' }]
          ]
        }
      }
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞:', error);
    await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∫–æ–º–∞–Ω–¥–æ–π /start');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
bot.action('profile', async (ctx) => {
  const userId = ctx.from.id;
  
  try {
    const user = await new Promise((resolve, reject) => {
      db.get('SELECT * FROM users WHERE telegram_id = ?', [userId], (err, row) => {
        if (err) reject(err);
        else resolve(row);
      });
    });

    if (user) {
      const status = user.is_resident ? 'üèÜ –†–µ–∑–∏–¥–µ–Ω—Ç' : 'üë§ –ì–æ—Å—Ç—å';
      const waiterStatus = user.is_waiter ? ' | üçΩÔ∏è –û—Ñ–∏—Ü–∏–∞–Ω—Ç' : '';
      
      await ctx.editMessageText(
        `üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n` +
        `–ò–º—è: ${user.first_name} ${user.last_name || ''}\n` +
        `Username: @${user.username || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n` +
        `–°—Ç–∞—Ç—É—Å: ${status}${waiterStatus}\n` +
        `–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${new Date(user.created_at).toLocaleDateString('ru-RU')}\n\n` +
        `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º!`,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: `${process.env.WEBHOOK_URL}/mini-app` } }],
              [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
            ]
          }
        }
      );
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
    await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è');
  }
});

bot.action('events', async (ctx) => {
  await ctx.editMessageText(
    'üìÖ –ê—Ñ–∏—à–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π\n\n' +
    '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è –∫–ª—É–±–∞. ' +
    '–î–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!',
    {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: `${process.env.WEBHOOK_URL}/mini-app` } }],
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
        ]
      }
    }
  );
});

bot.action('bar', async (ctx) => {
  await ctx.editMessageText(
    'üç∏ –ë–∞—Ä –∫–ª—É–±–∞\n\n' +
    '–ó–∞–∫–∞–∂–∏—Ç–µ –Ω–∞–ø–∏—Ç–∫–∏ –ø—Ä—è–º–æ –∏–∑ Telegram! ' +
    '–î–ª—è –ø–æ–ª–Ω–æ–≥–æ –º–µ–Ω—é –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.',
    {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: `${process.env.WEBHOOK_URL}/mini-app` } }],
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
        ]
      }
    }
  );
});

bot.action('back_to_main', async (ctx) => {
  const username = ctx.from.username || ctx.from.first_name;
  
  await ctx.editMessageText(
    `üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é SavosBot Club\n\n` +
    `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${username}! ` +
    `–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:`,
    {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: `${process.env.WEBHOOK_URL}/mini-app` } }],
          [{ text: 'üìã –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' }],
          [{ text: 'üìÖ –ê—Ñ–∏—à–∞', callback_data: 'events' }],
          [{ text: 'üç∏ –ë–∞—Ä', callback_data: 'bar' }]
        ]
      }
    }
  );
});

// –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏
bot.help(async (ctx) => {
  await ctx.reply(
    'üÜò –ü–æ–º–æ—â—å –ø–æ SavosBot Club\n\n' +
    '–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
    '/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n' +
    '/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n' +
    '/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n' +
    '–î–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"!',
    {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: `${process.env.WEBHOOK_URL}/mini-app` } }]
        ]
      }
    }
  );
});

// –ö–æ–º–∞–Ω–¥–∞ –º–µ–Ω—é
bot.command('menu', async (ctx) => {
  const username = ctx.from.username || ctx.from.first_name;
  
  await ctx.reply(
    `üçΩÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é SavosBot Club\n\n` +
    `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${username}! ` +
    `–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:`,
    {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: `${process.env.WEBHOOK_URL}/mini-app` } }],
          [{ text: 'üìã –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' }],
          [{ text: 'üìÖ –ê—Ñ–∏—à–∞', callback_data: 'events' }],
          [{ text: 'üç∏ –ë–∞—Ä', callback_data: 'bar' }]
        ]
      }
    }
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error('–û—à–∏–±–∫–∞ –±–æ—Ç–∞:', err);
  ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;

// Webhook –¥–ª—è Telegram (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ —Å HTTPS)
if (process.env.BOT_TOKEN && process.env.BOT_TOKEN !== 'demo_bot_token_for_testing' && process.env.WEBHOOK_URL.startsWith('https://')) {
    app.use(bot.webhookCallback('/webhook'));
    bot.telegram.setWebhook(`${process.env.WEBHOOK_URL}/webhook`);
    console.log('üîó Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞');
} else {
    console.log('‚ö†Ô∏è  –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ polling –≤–º–µ—Å—Ç–æ webhook');
    // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å polling
    // bot.launch(); // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è polling —Ä–µ–∂–∏–º–∞
}

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, '..', 'index.html'));
});

// –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
app.get('/login', (req, res) => {
  res.sendFile(path.join(__dirname, '..', 'login.html'));
});

// –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
app.get('/admin-panel', (req, res) => {
  res.sendFile(path.join(__dirname, '..', 'admin-panel', 'index.html'));
});

// –°—Ç—Ä–∞–Ω–∏—Ü–∞ Mini App
app.get('/mini-app', (req, res) => {
  res.sendFile(path.join(__dirname, '..', 'mini-app', 'index.html'));
});

app.listen(PORT, () => {
  console.log(`üöÄ SavosBot Club –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üì± Mini App –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: ${process.env.WEBHOOK_URL}/mini-app`);
  console.log(`üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É: ${process.env.WEBHOOK_URL}`);
});

module.exports = { bot, app };
