#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SavosBot Club - –§–ò–ù–ê–õ–¨–ù–ê–Ø —Ä–∞–±–æ—á–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è Python 3.13
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ë–ï–ó asyncio.run() –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
"""

import os
import json
import logging
import aiohttp
from datetime import datetime
from typing import Dict, Any, Optional

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class DatabaseManager:
    """–ü—Ä–æ—Å—Ç–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        self.data_dir = 'data'
        self.users_file = os.path.join(self.data_dir, 'users.json')
        self.stats_file = os.path.join(self.data_dir, 'statistics.json')
    
    def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        os.makedirs(self.data_dir, exist_ok=True)
        
        if not os.path.exists(self.users_file):
            with open(self.users_file, 'w') as f:
                json.dump([], f)
        
        if not os.path.exists(self.stats_file):
            with open(self.stats_file, 'w') as f:
                json.dump({
                    'total_users': 0,
                    'active_users': 0,
                    'today_users': 0,
                    'last_update': datetime.now().isoformat()
                }, f)
    
    def save_user(self, user_data: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with open(self.users_file, 'r') as f:
                users = json.load(f)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
            user_exists = any(u['id'] == user_data['id'] for u in users)
            
            if not user_exists:
                users.append(user_data)
                
                with open(self.users_file, 'w') as f:
                    json.dump(users, f, indent=2)
                
                logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['id']} —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                for i, u in enumerate(users):
                    if u['id'] == user_data['id']:
                        users[i] = {**u, **user_data}
                        break
                
                with open(self.users_file, 'w') as f:
                    json.dump(users, f, indent=2)
                
                logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['id']} –æ–±–Ω–æ–≤–ª—ë–Ω")
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            self.update_stats()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    def update_stats(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            with open(self.users_file, 'r') as f:
                users = json.load(f)
            
            today = datetime.now().date().isoformat()
            active = [u for u in users if u.get('is_active', False)]
            today_users = [u for u in users if u.get('joined_at', '').startswith(today)]
            
            stats = {
                'total_users': len(users),
                'active_users': len(active),
                'today_users': len(today_users),
                'last_update': datetime.now().isoformat()
            }
            
            with open(self.stats_file, 'w') as f:
                json.dump(stats, f, indent=2)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def get_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            with open(self.stats_file, 'r') as f:
                return json.load(f)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {
                'total_users': 0,
                'active_users': 0,
                'today_users': 0
            }

class WebsiteConnection:
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–∞–π—Ç—É"""
    
    def __init__(self, website_url: str, api_key: str):
        self.website_url = website_url.rstrip('/')
        self.api_key = api_key
        self.timeout = aiohttp.ClientTimeout(total=10)
        self.connected = False
    
    def check_connection(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è)"""
        try:
            try:
                import requests
                response = requests.get(f"{self.website_url}/api/health", timeout=5)
                if response.status_code == 200:
                    self.connected = True
                    return response.json()
                else:
                    self.connected = False
                    return {'status': 'error', 'message': f'HTTP {response.status_code}'}
            except ImportError:
                logger.warning("‚ö†Ô∏è –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ requests –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                self.connected = False
                return {'status': 'error', 'message': 'requests not installed'}
        except Exception as e:
            self.connected = False
            return {'status': 'error', 'message': str(e)}
    
    def send_user(self, user_data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–∞–π—Ç"""
        try:
            import requests
            response = requests.post(
                f"{self.website_url}/api/users",
                json={
                    **user_data,
                    'source': 'telegram_bot'
                },
                headers={
                    'Authorization': f'Bearer {self.api_key}',
                    'Content-Type': 'application/json'
                },
                timeout=5
            )
            if response.status_code == 200:
                logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['id']} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–∞–π—Ç")
                return response.json()
            else:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status_code}")
                return None
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–∞–π—Ç—É: {e}")
            return None

class SavosBotWorking:
    """–†–∞–±–æ—á–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ –ë–ï–ó asyncio –ø—Ä–æ–±–ª–µ–º –° –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï–ú –ö –°–ê–ô–¢–£"""
    
    def __init__(self):
        self.bot_token = os.getenv('BOT_TOKEN')
        if not self.bot_token:
            raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env")
        
        self.website_url = os.getenv('WEBSITE_URL', 'https://savos-club-two.vercel.app')
        self.api_key = os.getenv('API_KEY', 'savosbot2024')
        
        self.db = DatabaseManager()
        self.db.initialize()  # –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–∞–π—Ç—É
        self.website = WebsiteConnection(self.website_url, self.api_key)
        connection_result = self.website.check_connection()
        logger.info(f"üåê –°—Ç–∞—Ç—É—Å —Å–∞–π—Ç–∞: {connection_result.get('status')}")
        
        self.application = Application.builder().token(self.bot_token).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("help", self.help))
        self.application.add_handler(CommandHandler("stats", self.stats))
        self.application.add_handler(CommandHandler("sync", self.sync))
        self.application.add_handler(MessageHandler(filters.CONTACT, self.handle_contact))
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start"""
        user = update.effective_user
        logger.info(f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.id} ({user.username})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        try:
            if os.path.exists(self.db.users_file):
                with open(self.db.users_file, 'r') as f:
                    users = json.load(f)
            else:
                users = []
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –±–∞–∑—ã: {e}")
            users = []
        
        existing_user = next((u for u in users if u['id'] == user.id), None)
        
        if existing_user:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            keyboard = [
                [InlineKeyboardButton("üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url="https://savos-club-two.vercel.app/mini-app"))],
                [InlineKeyboardButton("üìã –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")]
            ]
            
            await update.message.reply_text(
                f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.first_name}!\n\n"
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –≤ SavosBot Club.",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø—Ä–æ—Å–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω
            phone_keyboard = [[KeyboardButton("üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            profile_link = f"https://t.me/{user.username}" if user.username else None
            
            user_data = {
                'id': user.id,
                'username': user.username,
                'first_name': user.first_name,
                'last_name': user.last_name,
                'joined_at': datetime.now().isoformat(),
                'is_active': True,
                'profile_link': profile_link,
                'photo_url': None,
                'phone': None
            }
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
            try:
                photos = await context.bot.get_user_profile_photos(user.id, limit=1)
                if photos.total_count > 0:
                    photo_file = await context.bot.get_file(photos.photos[0][0].file_id)
                    user_data['photo_url'] = photo_file.file_path
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ: {e}")
            
            # –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–∞–π—Ç –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            # –¢–æ–ª—å–∫–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            self.db.save_user(user_data)
            
            await update.message.reply_text(
                f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SavosBot Club, {user.first_name}!\n\n"
                "üìû –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
                reply_markup=ReplyKeyboardMarkup(
                    phone_keyboard,
                    resize_keyboard=True,
                    one_time_keyboard=True
                )
            )
    
    async def handle_contact(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        user = update.effective_user
        contact = update.message.contact
        
        logger.info(f"üìû –ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        try:
            if os.path.exists(self.db.users_file):
                with open(self.db.users_file, 'r') as f:
                    users = json.load(f)
            else:
                users = []
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –±–∞–∑—ã: {e}")
            users = []
        
        # –°—á–∏—Ç–∞–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º)
        registered_count = len([u for u in users if u.get('phone')])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º internal_id
        user_internal = None
        for u in users:
            if u['id'] == user.id:
                u['phone'] = contact.phone_number
                if not u.get('internal_id'):
                    u['internal_id'] = registered_count + 1
                user_internal = u
                break
        
        with open(self.db.users_file, 'w') as f:
            json.dump(users, f, indent=2)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–∞–π—Ç –í–°–ï–ì–î–ê
        logger.info(f"üì§ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–∞–π—Ç...")
        if user_internal:
            result = self.website.send_user(user_internal)
            if result:
                logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–∞–π—Ç")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å–∞–π—Ç, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ")
        
        # –ù–∞—Ö–æ–¥–∏–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        internal_id = user_internal.get('internal_id', registered_count + 1) if user_internal else registered_count + 1
        
        # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        keyboard = [
            [InlineKeyboardButton("üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url="https://savos-club-two.vercel.app/mini-app"))],
            [InlineKeyboardButton("üìã –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")]
        ]
        
        await update.message.reply_text(
            f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"üë§ –ò–º—è: {user.first_name} {user.last_name or ''}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: +{contact.phone_number}\n"
            f"üÜî ID –≤ —Å–∏—Å—Ç–µ–º–µ: {internal_id}\n"
            f"üîó –ü—Ä–æ—Ñ–∏–ª—å: {'https://t.me/' + user.username if user.username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω (—Ç–µ–ª–µ—Ñ–æ–Ω: {contact.phone_number})")
    
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞)"""
        user = update.effective_user
        text = update.message.text
        
        logger.info(f"üìù –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {text}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –∏ –Ω–µ—Ç –ª–∏ —É –Ω–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        try:
            if os.path.exists(self.db.users_file):
                with open(self.db.users_file, 'r') as f:
                    users = json.load(f)
            else:
                users = []
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –±–∞–∑—ã: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")
            return
        
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = next((u for u in users if u['id'] == user.id), None)
        
        if user_data and not user_data.get('phone'):
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–æ –Ω–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            import re
            phone_regex = r'^[\d\s\+\-\(\)]+$'
            if re.match(phone_regex, text) and len(re.sub(r'\D', '', text)) >= 10:
                # –≠—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                phone = re.sub(r'\D', '', text)  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º internal_id
                # –°—á–∏—Ç–∞–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º)
                registered_count = len([u for u in users if u.get('phone')])
                if not user_data.get('internal_id'):
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º internal_id –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
                    user_data['internal_id'] = registered_count + 1
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
                user_data['phone'] = phone
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º
                for i, u in enumerate(users):
                    if u['id'] == user.id:
                        users[i] = user_data
                        break
                
                with open(self.db.users_file, 'w') as f:
                    json.dump(users, f, indent=2)
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–∞–π—Ç –í–°–ï–ì–î–ê (–¥–∞–∂–µ –µ—Å–ª–∏ —Å–∞–π—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º)
                logger.info(f"üì§ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–∞–π—Ç...")
                result = self.website.send_user(user_data)
                if result:
                    logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–∞–π—Ç")
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å–∞–π—Ç, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ")
                
                keyboard = [
                    [InlineKeyboardButton("üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url="https://savos-club-two.vercel.app/mini-app"))],
                    [InlineKeyboardButton("üìã –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")]
                ]
                
                # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—ã—à–µ
                internal_id = user_data.get('internal_id', registered_count + 1)
                
                await update.message.reply_text(
                    f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                    f"üë§ –ò–º—è: {user.first_name} {user.last_name or ''}\n"
                    f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: +{phone}\n"
                    f"üÜî ID –≤ —Å–∏—Å—Ç–µ–º–µ: {internal_id}\n"
                    f"üîó –ü—Ä–æ—Ñ–∏–ª—å: {'https://t.me/' + user.username if user.username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                
                logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω (—Ç–µ–ª–µ—Ñ–æ–Ω: {phone})")
            else:
                # –ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                await update.message.reply_text(
                    "‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä:"
                )
        elif user_data and user_data.get('phone'):
            # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω - –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await update.message.reply_text(
                "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º."
            )
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start"
            )
    
    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ /help"""
        await update.message.reply_text(
            "ü§ñ SavosBot Club\n\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å\n"
            "/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
        )
    
    async def stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ /stats"""
        stats = self.db.get_statistics()
        
        status = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ" if self.website.connected else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ"
        
        await update.message.reply_text(
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
            f"üë• –í—Å–µ–≥–æ: {stats['total_users']}\n"
            f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_users']}\n"
            f"üìÖ –°–µ–≥–æ–¥–Ω—è: {stats['today_users']}\n\n"
            f"üåê –°–∞–π—Ç: {status}"
        )
    
    async def sync(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ /sync - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–∞–π—Ç–æ–º"""
        if not self.website.connected:
            await update.message.reply_text(
                "‚ùå –°–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n"
                "–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return
        
        await update.message.reply_text("üîÑ –ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...")
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        await update.message.reply_text("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ SavosBot...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self.error_handler)
        
        self.application.run_polling(
            allowed_updates=['message', 'callback_query', 'inline_query'],
            drop_pending_updates=True,  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            close_loop=False
        )
    
    async def error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        import traceback
        
        logger.error(f"Exception while handling an update: {context.error}")
        
        tb = ''.join(traceback.format_exception(None, context.error, context.error.__traceback__))
        logger.error(tb)
        
        # –ù–µ –∫—Ä–∞—à–∏–º –±–æ—Ç–∞ –ø—Ä–∏ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–∫–∞—Ö
        if isinstance(context.error, Exception) and 'Network' in str(type(context.error)):
            logger.warning("‚ö†Ô∏è Network error occurred, continuing...")
            return

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –ë–ï–ó async"""
    bot = SavosBotWorking()
    bot.run()

if __name__ == '__main__':
    main()
